{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildCodeAsync = buildCodeAsync;\nexports.deriveChallengeAsync = deriveChallengeAsync;\nexports.generateHexStringAsync = generateHexStringAsync;\nexports.generateRandom = generateRandom;\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar Crypto = _interopRequireWildcard(require(\"expo-crypto\"));\n\nvar Random = _interopRequireWildcard(require(\"expo-random\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nfunction getRandomValues(input) {\n  var output = input;\n  if (input.byteLength !== input.length) input = new Uint8Array(input.buffer);\n  var bytes = Random.getRandomBytes(input.length);\n\n  for (var i = 0; i < bytes.length; i++) {\n    input[i] = bytes[i];\n  }\n\n  return output;\n}\n\nfunction convertBufferToString(buffer) {\n  var state = [];\n\n  for (var i = 0; i < buffer.byteLength; i += 1) {\n    var index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n\n  return state.join('');\n}\n\nfunction convertToUrlSafeString(b64) {\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction generateRandom(size) {\n  var buffer = new Uint8Array(size);\n  getRandomValues(buffer);\n  return convertBufferToString(buffer);\n}\n\nfunction deriveChallengeAsync(_x) {\n  return _deriveChallengeAsync.apply(this, arguments);\n}\n\nfunction _deriveChallengeAsync() {\n  _deriveChallengeAsync = (0, _asyncToGenerator2.default)(function* (code) {\n    (0, _invariant.default)(code.length > 42 && code.length < 129, 'Invalid code length for PKCE.');\n    var buffer = yield Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, code, {\n      encoding: Crypto.CryptoEncoding.BASE64\n    });\n    return convertToUrlSafeString(buffer);\n  });\n  return _deriveChallengeAsync.apply(this, arguments);\n}\n\nfunction buildCodeAsync() {\n  return _buildCodeAsync.apply(this, arguments);\n}\n\nfunction _buildCodeAsync() {\n  _buildCodeAsync = (0, _asyncToGenerator2.default)(function* () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n    var codeVerifier = generateRandom(size);\n    var codeChallenge = yield deriveChallengeAsync(codeVerifier);\n    return {\n      codeVerifier: codeVerifier,\n      codeChallenge: codeChallenge\n    };\n  });\n  return _buildCodeAsync.apply(this, arguments);\n}\n\nfunction generateHexStringAsync(_x2) {\n  return _generateHexStringAsync.apply(this, arguments);\n}\n\nfunction _generateHexStringAsync() {\n  _generateHexStringAsync = (0, _asyncToGenerator2.default)(function* (size) {\n    var value = generateRandom(size);\n    var buffer = yield Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, value, {\n      encoding: Crypto.CryptoEncoding.HEX\n    });\n    return convertToUrlSafeString(buffer);\n  });\n  return _generateHexStringAsync.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,IAAMA,OAAO,GAAG,gEAAhB;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAA0C;EACxC,IAAMC,MAAM,GAAGD,KAAf;EAEA,IAAIA,KAAK,CAACE,UAAN,KAAqBF,KAAK,CAACG,MAA/B,EAAuCH,KAAK,GAAG,IAAII,UAAJ,CAAeJ,KAAK,CAACK,MAArB,CAAR;EAEvC,IAAMC,KAAK,GAAGC,MAAM,CAACC,cAAP,CAAsBR,KAAK,CAACG,MAA5B,CAAd;;EAEA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACH,MAA1B,EAAkCM,CAAC,EAAnC;IAAuCT,KAAK,CAACS,CAAD,CAAL,GAAWH,KAAK,CAACG,CAAD,CAAhB;EAAvC;;EAEA,OAAOR,MAAP;AACD;;AAED,SAASS,qBAAT,CAA+BL,MAA/B,EAAiD;EAC/C,IAAMM,KAAK,GAAa,EAAxB;;EACA,KAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACH,UAA3B,EAAuCO,CAAC,IAAI,CAA5C,EAA+C;IAC7C,IAAMG,KAAK,GAAGP,MAAM,CAACI,CAAD,CAAN,GAAYX,OAAO,CAACK,MAAlC;IACAQ,KAAK,CAACE,IAAN,CAAWf,OAAO,CAACc,KAAD,CAAlB;EACD;;EACD,OAAOD,KAAK,CAACG,IAAN,CAAW,EAAX,CAAP;AACD;;AAED,SAASC,sBAAT,CAAgCC,GAAhC,EAA2C;EACzC,OAAOA,GAAG,CAACC,OAAJ,CAAY,KAAZ,EAAmB,GAAnB,EAAwBA,OAAxB,CAAgC,KAAhC,EAAuC,GAAvC,EAA4CA,OAA5C,CAAoD,IAApD,EAA0D,EAA1D,CAAP;AACD;;AAEK,SAAUC,cAAV,CAAyBC,IAAzB,EAAqC;EACzC,IAAMd,MAAM,GAAG,IAAID,UAAJ,CAAee,IAAf,CAAf;EACApB,eAAe,CAACM,MAAD,CAAf;EACA,OAAOK,qBAAqB,CAACL,MAAD,CAA5B;AACD;;SAMqBe,oB;;;;;0DAAf,WAAoCC,IAApC,EAAgD;IAErD,wBAAUA,IAAI,CAAClB,MAAL,GAAc,EAAd,IAAoBkB,IAAI,CAAClB,MAAL,GAAc,GAA5C,EAAiD,+BAAjD;IAEA,IAAME,MAAM,SAASiB,MAAM,CAACC,iBAAP,CAAyBD,MAAM,CAACE,qBAAP,CAA6BC,MAAtD,EAA8DJ,IAA9D,EAAoE;MACvFK,QAAQ,EAAEJ,MAAM,CAACK,cAAP,CAAsBC;IADuD,CAApE,CAArB;IAGA,OAAOb,sBAAsB,CAACV,MAAD,CAA7B;EACD,C;;;;SAEqBwB,c;;;;;oDAAf,aACa;IAAA,IAAlBV,IAAkB,uEAAH,GAAG;IAGlB,IAAMW,YAAY,GAAGZ,cAAc,CAACC,IAAD,CAAnC;IACA,IAAMY,aAAa,SAASX,oBAAoB,CAACU,YAAD,CAAhD;IAEA,OAAO;MAAEA,YAAY,EAAZA,YAAF;MAAgBC,aAAa,EAAbA;IAAhB,CAAP;EACD,C;;;;SAKqBC,sB;;;;;4DAAf,WAAsCb,IAAtC,EAAkD;IACvD,IAAMc,KAAK,GAAGf,cAAc,CAACC,IAAD,CAA5B;IACA,IAAMd,MAAM,SAASiB,MAAM,CAACC,iBAAP,CAAyBD,MAAM,CAACE,qBAAP,CAA6BC,MAAtD,EAA8DQ,KAA9D,EAAqE;MACxFP,QAAQ,EAAEJ,MAAM,CAACK,cAAP,CAAsBO;IADwD,CAArE,CAArB;IAGA,OAAOnB,sBAAsB,CAACV,MAAD,CAA7B;EACD,C","names":["CHARSET","getRandomValues","input","output","byteLength","length","Uint8Array","buffer","bytes","Random","getRandomBytes","i","convertBufferToString","state","index","push","join","convertToUrlSafeString","b64","replace","generateRandom","size","deriveChallengeAsync","code","Crypto","digestStringAsync","CryptoDigestAlgorithm","SHA256","encoding","CryptoEncoding","BASE64","buildCodeAsync","codeVerifier","codeChallenge","generateHexStringAsync","value","HEX"],"sourceRoot":"","sources":["../src/PKCE.ts"],"sourcesContent":["import * as Crypto from 'expo-crypto';\nimport * as Random from 'expo-random';\nimport invariant from 'invariant';\n\nconst CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nfunction getRandomValues(input: Uint8Array): Uint8Array {\n  const output = input;\n  // Get access to the underlying raw bytes\n  if (input.byteLength !== input.length) input = new Uint8Array(input.buffer);\n\n  const bytes = Random.getRandomBytes(input.length);\n\n  for (let i = 0; i < bytes.length; i++) input[i] = bytes[i];\n\n  return output;\n}\n\nfunction convertBufferToString(buffer: Uint8Array): string {\n  const state: string[] = [];\n  for (let i = 0; i < buffer.byteLength; i += 1) {\n    const index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n  return state.join('');\n}\n\nfunction convertToUrlSafeString(b64: string): string {\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nexport function generateRandom(size: number): string {\n  const buffer = new Uint8Array(size);\n  getRandomValues(buffer);\n  return convertBufferToString(buffer);\n}\n\n/**\n * Proof key for Code Exchange by OAuth Public Clients (RFC 7636), Section 4.1\n * [Section 4.1](https://tools.ietf.org/html/rfc7636#section-4.1)\n */\nexport async function deriveChallengeAsync(code: string): Promise<string> {\n  // 43 is the minimum, and 128 is the maximum.\n  invariant(code.length > 42 && code.length < 129, 'Invalid code length for PKCE.');\n\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, code, {\n    encoding: Crypto.CryptoEncoding.BASE64,\n  });\n  return convertToUrlSafeString(buffer);\n}\n\nexport async function buildCodeAsync(\n  size: number = 128\n): Promise<{ codeChallenge: string; codeVerifier: string }> {\n  // This method needs to be resolved like all other native methods.\n  const codeVerifier = generateRandom(size);\n  const codeChallenge = await deriveChallengeAsync(codeVerifier);\n\n  return { codeVerifier, codeChallenge };\n}\n\n/**\n * Digest a random string with hex encoding, useful for creating `nonce`s.\n */\nexport async function generateHexStringAsync(size: number): Promise<string> {\n  const value = generateRandom(size);\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, value, {\n    encoding: Crypto.CryptoEncoding.HEX,\n  });\n  return convertToUrlSafeString(buffer);\n}\n"]},"metadata":{},"sourceType":"script"}