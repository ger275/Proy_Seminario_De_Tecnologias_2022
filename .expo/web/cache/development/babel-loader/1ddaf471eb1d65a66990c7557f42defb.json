{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  makeUrl: true,\n  createURL: true,\n  parse: true,\n  addEventListener: true,\n  removeEventListener: true,\n  parseInitialURLAsync: true,\n  sendIntent: true,\n  openSettings: true,\n  getInitialURL: true,\n  openURL: true,\n  canOpenURL: true,\n  useURL: true\n};\nexports.addEventListener = addEventListener;\nexports.canOpenURL = canOpenURL;\nexports.createURL = createURL;\nexports.getInitialURL = getInitialURL;\nexports.makeUrl = makeUrl;\nexports.openSettings = openSettings;\nexports.openURL = openURL;\nexports.parse = parse;\nexports.parseInitialURLAsync = parseInitialURLAsync;\nexports.removeEventListener = removeEventListener;\nexports.sendIntent = sendIntent;\nexports.useURL = useURL;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _expoConstants = _interopRequireDefault(require(\"expo-constants\"));\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\nvar _react = require(\"react\");\n\nvar _urlParse = _interopRequireDefault(require(\"url-parse\"));\n\nvar _ExpoLinking = _interopRequireDefault(require(\"./ExpoLinking\"));\n\nvar _Schemes = require(\"./Schemes\");\n\nObject.keys(_Schemes).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _Schemes[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _Schemes[key];\n    }\n  });\n});\n\nvar _Linking = require(\"./Linking.types\");\n\nObject.keys(_Linking).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _Linking[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _Linking[key];\n    }\n  });\n});\n\nfunction validateURL(url) {\n  (0, _invariant.default)(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n  (0, _invariant.default)(url, 'Invalid URL: cannot be empty');\n}\n\nfunction getHostUri() {\n  var _Constants$manifest, _Constants$manifest2, _Constants$manifest2$, _Constants$manifest2$2;\n\n  if ((_Constants$manifest = _expoConstants.default.manifest) != null && _Constants$manifest.hostUri) {\n    return _expoConstants.default.manifest.hostUri;\n  } else if ((_Constants$manifest2 = _expoConstants.default.manifest2) != null && (_Constants$manifest2$ = _Constants$manifest2.extra) != null && (_Constants$manifest2$2 = _Constants$manifest2$.expoClient) != null && _Constants$manifest2$2.hostUri) {\n    return _expoConstants.default.manifest2.extra.expoClient.hostUri;\n  } else if (!(0, _Schemes.hasCustomScheme)()) {\n    return removeScheme(_expoConstants.default.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n  } else {\n    return null;\n  }\n}\n\nfunction isExpoHosted() {\n  var _Constants$manifest3, _Constants$manifest4, _Constants$manifest4$, _Constants$manifest4$2;\n\n  var hostUri = getHostUri();\n  return !!(hostUri && (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(hostUri) || (_Constants$manifest3 = _expoConstants.default.manifest) != null && _Constants$manifest3.developer || (_Constants$manifest4 = _expoConstants.default.manifest2) != null && (_Constants$manifest4$ = _Constants$manifest4.extra) != null && (_Constants$manifest4$2 = _Constants$manifest4$.expoGo) != null && _Constants$manifest4$2.developer));\n}\n\nfunction removeScheme(url) {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\n\nfunction removePort(url) {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\n\nfunction removeLeadingSlash(url) {\n  return url.replace(/^\\//, '');\n}\n\nfunction removeTrailingSlashAndQueryString(url) {\n  return url.replace(/\\/?\\?.*$/, '');\n}\n\nfunction ensureTrailingSlash(input, shouldAppend) {\n  var hasSlash = input.endsWith('/');\n\n  if (hasSlash && !shouldAppend) {\n    return input.substring(0, input.length - 1);\n  } else if (!hasSlash && shouldAppend) {\n    return input + \"/\";\n  }\n\n  return input;\n}\n\nfunction ensureLeadingSlash(input, shouldAppend) {\n  var hasSlash = input.startsWith('/');\n\n  if (hasSlash && !shouldAppend) {\n    return input.substring(1);\n  } else if (!hasSlash && shouldAppend) {\n    return \"/\" + input;\n  }\n\n  return input;\n}\n\nfunction makeUrl() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var queryParams = arguments.length > 1 ? arguments[1] : undefined;\n  var scheme = arguments.length > 2 ? arguments[2] : undefined;\n  return createURL(path, {\n    queryParams: queryParams,\n    scheme: scheme,\n    isTripleSlashed: true\n  });\n}\n\nfunction createURL(path) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      scheme = _ref.scheme,\n      _ref$queryParams = _ref.queryParams,\n      queryParams = _ref$queryParams === void 0 ? {} : _ref$queryParams,\n      _ref$isTripleSlashed = _ref.isTripleSlashed,\n      isTripleSlashed = _ref$isTripleSlashed === void 0 ? false : _ref$isTripleSlashed;\n\n  if (_expoModulesCore.Platform.OS === 'web') {\n    if (!_expoModulesCore.Platform.isDOMAvailable) return '';\n    var origin = ensureTrailingSlash(window.location.origin, false);\n\n    var _queryString = _qs.default.stringify(queryParams);\n\n    if (_queryString) {\n      _queryString = \"?\" + _queryString;\n    }\n\n    var outputPath = path;\n    if (outputPath) outputPath = ensureLeadingSlash(path, true);\n    return encodeURI(\"\" + origin + outputPath + _queryString);\n  }\n\n  var resolvedScheme = (0, _Schemes.resolveScheme)({\n    scheme: scheme\n  });\n  var hostUri = getHostUri() || '';\n\n  if ((0, _Schemes.hasCustomScheme)() && isExpoHosted()) {\n    hostUri = '';\n  }\n\n  if (path) {\n    if (isExpoHosted() && hostUri) {\n      path = \"/--/\" + removeLeadingSlash(path);\n    }\n\n    if (isTripleSlashed && !path.startsWith('/')) {\n      path = \"/\" + path;\n    }\n  } else {\n    path = '';\n  }\n\n  var queryString = '';\n  var queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    var paramsFromHostUri = {};\n\n    try {\n      var parsedParams = _qs.default.parse(queryString);\n\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch (_unused) {}\n\n    queryParams = Object.assign({}, queryParams, paramsFromHostUri);\n  }\n\n  queryString = _qs.default.stringify(queryParams);\n\n  if (queryString) {\n    queryString = \"?\" + queryString;\n  }\n\n  hostUri = ensureLeadingSlash(hostUri, !isTripleSlashed);\n  return encodeURI(resolvedScheme + \":\" + (isTripleSlashed ? '/' : '') + \"/\" + hostUri + path + queryString);\n}\n\nfunction parse(url) {\n  validateURL(url);\n  var parsed = (0, _urlParse.default)(url, true);\n\n  for (var param in parsed.query) {\n    parsed.query[param] = decodeURIComponent(parsed.query[param]);\n  }\n\n  var queryParams = parsed.query;\n  var hostUri = getHostUri() || '';\n  var hostUriStripped = removePort(removeTrailingSlashAndQueryString(hostUri));\n  var path = parsed.pathname || null;\n  var hostname = parsed.hostname || null;\n  var scheme = parsed.protocol || null;\n\n  if (scheme) {\n    scheme = scheme.substring(0, scheme.length - 1);\n  }\n\n  if (path) {\n    path = removeLeadingSlash(path);\n    var expoPrefix = null;\n\n    if (hostUriStripped) {\n      var parts = hostUriStripped.split('/');\n      expoPrefix = parts.slice(1).concat(['--/']).join('/');\n    }\n\n    if (isExpoHosted() && !(0, _Schemes.hasCustomScheme)() && expoPrefix && path.startsWith(expoPrefix)) {\n      path = path.substring(expoPrefix.length);\n      hostname = null;\n    } else if (path.indexOf('+') > -1) {\n      path = path.substring(path.indexOf('+') + 1);\n    }\n  }\n\n  return {\n    hostname: hostname,\n    path: path,\n    queryParams: queryParams,\n    scheme: scheme\n  };\n}\n\nfunction addEventListener(type, handler) {\n  return _ExpoLinking.default.addEventListener(type, handler);\n}\n\nfunction removeEventListener(type, handler) {\n  _ExpoLinking.default.removeEventListener(type, handler);\n}\n\nfunction parseInitialURLAsync() {\n  return _parseInitialURLAsync.apply(this, arguments);\n}\n\nfunction _parseInitialURLAsync() {\n  _parseInitialURLAsync = (0, _asyncToGenerator2.default)(function* () {\n    var initialUrl = yield _ExpoLinking.default.getInitialURL();\n\n    if (!initialUrl) {\n      return {\n        scheme: null,\n        hostname: null,\n        path: null,\n        queryParams: null\n      };\n    }\n\n    return parse(initialUrl);\n  });\n  return _parseInitialURLAsync.apply(this, arguments);\n}\n\nfunction sendIntent(_x, _x2) {\n  return _sendIntent.apply(this, arguments);\n}\n\nfunction _sendIntent() {\n  _sendIntent = (0, _asyncToGenerator2.default)(function* (action, extras) {\n    if (_expoModulesCore.Platform.OS === 'android') {\n      return yield _ExpoLinking.default.sendIntent(action, extras);\n    }\n\n    throw new _expoModulesCore.UnavailabilityError('Linking', 'sendIntent');\n  });\n  return _sendIntent.apply(this, arguments);\n}\n\nfunction openSettings() {\n  return _openSettings.apply(this, arguments);\n}\n\nfunction _openSettings() {\n  _openSettings = (0, _asyncToGenerator2.default)(function* () {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      throw new _expoModulesCore.UnavailabilityError('Linking', 'openSettings');\n    }\n\n    if (_ExpoLinking.default.openSettings) {\n      return yield _ExpoLinking.default.openSettings();\n    }\n\n    yield openURL('app-settings:');\n  });\n  return _openSettings.apply(this, arguments);\n}\n\nfunction getInitialURL() {\n  return _getInitialURL.apply(this, arguments);\n}\n\nfunction _getInitialURL() {\n  _getInitialURL = (0, _asyncToGenerator2.default)(function* () {\n    var _yield$NativeLinking$;\n\n    return (_yield$NativeLinking$ = yield _ExpoLinking.default.getInitialURL()) != null ? _yield$NativeLinking$ : null;\n  });\n  return _getInitialURL.apply(this, arguments);\n}\n\nfunction openURL(_x3) {\n  return _openURL.apply(this, arguments);\n}\n\nfunction _openURL() {\n  _openURL = (0, _asyncToGenerator2.default)(function* (url) {\n    validateURL(url);\n    return yield _ExpoLinking.default.openURL(url);\n  });\n  return _openURL.apply(this, arguments);\n}\n\nfunction canOpenURL(_x4) {\n  return _canOpenURL.apply(this, arguments);\n}\n\nfunction _canOpenURL() {\n  _canOpenURL = (0, _asyncToGenerator2.default)(function* (url) {\n    validateURL(url);\n    return yield _ExpoLinking.default.canOpenURL(url);\n  });\n  return _canOpenURL.apply(this, arguments);\n}\n\nfunction useURL() {\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      url = _useState2[0],\n      setLink = _useState2[1];\n\n  function onChange(event) {\n    setLink(event.url);\n  }\n\n  (0, _react.useEffect)(function () {\n    getInitialURL().then(function (url) {\n      return setLink(url);\n    });\n    var subscription = addEventListener('url', onChange);\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n  return url;\n}","map":{"version":3,"mappings":"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","names":["validateURL","url","getHostUri","Constants","manifest","hostUri","manifest2","extra","expoClient","removeScheme","linkingUri","replace","isExpoHosted","test","developer","expoGo","removePort","removeLeadingSlash","removeTrailingSlashAndQueryString","ensureTrailingSlash","input","shouldAppend","hasSlash","endsWith","substring","length","ensureLeadingSlash","startsWith","makeUrl","path","queryParams","scheme","createURL","isTripleSlashed","Platform","OS","isDOMAvailable","origin","window","location","queryString","qs","stringify","outputPath","encodeURI","resolvedScheme","queryStringMatchResult","match","paramsFromHostUri","parsedParams","parse","parsed","param","query","decodeURIComponent","hostUriStripped","pathname","hostname","protocol","expoPrefix","parts","split","slice","concat","join","indexOf","addEventListener","type","handler","NativeLinking","removeEventListener","parseInitialURLAsync","initialUrl","getInitialURL","sendIntent","action","extras","UnavailabilityError","openSettings","openURL","canOpenURL","useURL","setLink","onChange","event","then","subscription","remove"],"sourceRoot":"","sources":["../src/Linking.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport { Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport qs from 'qs';\nimport { useEffect, useState } from 'react';\nimport { EmitterSubscription } from 'react-native';\nimport URL from 'url-parse';\n\nimport NativeLinking from './ExpoLinking';\nimport {\n  CreateURLOptions,\n  ParsedURL,\n  QueryParams,\n  SendIntentExtras,\n  URLListener,\n} from './Linking.types';\nimport { hasCustomScheme, resolveScheme } from './Schemes';\n\nfunction validateURL(url: string): void {\n  invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\n\nfunction getHostUri(): string | null {\n  if (Constants.manifest?.hostUri) {\n    return Constants.manifest.hostUri;\n  } else if (Constants.manifest2?.extra?.expoClient?.hostUri) {\n    return Constants.manifest2.extra.expoClient.hostUri;\n  } else if (!hasCustomScheme()) {\n    // we're probably not using up-to-date xdl, so just fake it for now\n    // we have to remove the /--/ on the end since this will be inserted again later\n    return removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n  } else {\n    return null;\n  }\n}\n\nfunction isExpoHosted(): boolean {\n  const hostUri = getHostUri();\n  return !!(\n    hostUri &&\n    (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(hostUri) ||\n      Constants.manifest?.developer ||\n      Constants.manifest2?.extra?.expoGo?.developer)\n  );\n}\n\nfunction removeScheme(url: string): string {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\n\nfunction removePort(url: string): string {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\n\nfunction removeLeadingSlash(url: string): string {\n  return url.replace(/^\\//, '');\n}\n\nfunction removeTrailingSlashAndQueryString(url: string): string {\n  return url.replace(/\\/?\\?.*$/, '');\n}\n\nfunction ensureTrailingSlash(input: string, shouldAppend: boolean): string {\n  const hasSlash = input.endsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(0, input.length - 1);\n  } else if (!hasSlash && shouldAppend) {\n    return `${input}/`;\n  }\n  return input;\n}\n\nfunction ensureLeadingSlash(input: string, shouldAppend: boolean): string {\n  const hasSlash = input.startsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(1);\n  } else if (!hasSlash && shouldAppend) {\n    return `/${input}`;\n  }\n  return input;\n}\n\n// @needsAudit\n/**\n * Create a URL that works for the environment the app is currently running in.\n * The scheme in bare and standalone must be defined in the app.json under `expo.scheme`.\n *\n * # Examples\n * - Bare: empty string\n * - Standalone, Custom: `yourscheme:///path`\n * - Web (dev): `https://localhost:19006/path`\n * - Web (prod): `https://myapp.com/path`\n * - Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n * - Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n *\n * @param path addition path components to append to the base URL.\n * @param queryParams An object with a set of query parameters. These will be merged with any\n * Expo-specific parameters that are needed (e.g. release channel) and then appended to the URL\n * as a query string.\n * @param scheme Optional URI protocol to use in the URL `<scheme>:///`, when `undefined` the scheme\n * will be chosen from the Expo config (`app.config.js` or `app.json`).\n * @return A URL string which points to your app with the given deep link information.\n * @deprecated An alias for [`createURL()`](#linkingcreateurlpath-namedparameters). This method is\n * deprecated and will be removed in a future SDK version.\n */\nexport function makeUrl(path: string = '', queryParams?: QueryParams, scheme?: string): string {\n  return createURL(path, { queryParams, scheme, isTripleSlashed: true });\n}\n\n// @needsAudit\n/**\n * Helper method for constructing a deep link into your app, given an optional path and set of query\n * parameters. Creates a URI scheme with two slashes by default.\n *\n * The scheme in bare and standalone must be defined in the Expo config (`app.config.js` or `app.json`)\n * under `expo.scheme`.\n *\n * # Examples\n * - Bare: `<scheme>://path` - uses provided scheme or scheme from Expo config `scheme`.\n * - Standalone, Custom: `yourscheme://path`\n * - Web (dev): `https://localhost:19006/path`\n * - Web (prod): `https://myapp.com/path`\n * - Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n * - Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n *\n * @param path Addition path components to append to the base URL.\n * @param namedParameters Additional options object.\n * @return A URL string which points to your app with the given deep link information.\n */\nexport function createURL(\n  path: string,\n  { scheme, queryParams = {}, isTripleSlashed = false }: CreateURLOptions = {}\n): string {\n  if (Platform.OS === 'web') {\n    if (!Platform.isDOMAvailable) return '';\n\n    const origin = ensureTrailingSlash(window.location.origin, false);\n    let queryString = qs.stringify(queryParams);\n    if (queryString) {\n      queryString = `?${queryString}`;\n    }\n\n    let outputPath = path;\n    if (outputPath) outputPath = ensureLeadingSlash(path, true);\n\n    return encodeURI(`${origin}${outputPath}${queryString}`);\n  }\n\n  const resolvedScheme = resolveScheme({ scheme });\n\n  let hostUri = getHostUri() || '';\n\n  if (hasCustomScheme() && isExpoHosted()) {\n    hostUri = '';\n  }\n\n  if (path) {\n    if (isExpoHosted() && hostUri) {\n      path = `/--/${removeLeadingSlash(path)}`;\n    }\n    if (isTripleSlashed && !path.startsWith('/')) {\n      path = `/${path}`;\n    }\n  } else {\n    path = '';\n  }\n\n  // merge user-provided query params with any that were already in the hostUri\n  // e.g. release-channel\n  let queryString = '';\n  const queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    let paramsFromHostUri = {};\n    try {\n      const parsedParams = qs.parse(queryString);\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch {}\n    queryParams = {\n      ...queryParams,\n      ...paramsFromHostUri,\n    };\n  }\n  queryString = qs.stringify(queryParams);\n  if (queryString) {\n    queryString = `?${queryString}`;\n  }\n\n  hostUri = ensureLeadingSlash(hostUri, !isTripleSlashed);\n\n  return encodeURI(\n    `${resolvedScheme}:${isTripleSlashed ? '/' : ''}/${hostUri}${path}${queryString}`\n  );\n}\n\n// @needsAudit\n/**\n * Helper method for parsing out deep link information from a URL.\n * @param url A URL that points to the currently running experience (e.g. an output of `Linking.createURL()`).\n * @return A `ParsedURL` object.\n */\nexport function parse(url: string): ParsedURL {\n  validateURL(url);\n\n  const parsed = URL(url, /* parseQueryString */ true);\n\n  for (const param in parsed.query) {\n    parsed.query[param] = decodeURIComponent(parsed.query[param]!);\n  }\n  const queryParams = parsed.query;\n\n  const hostUri = getHostUri() || '';\n  const hostUriStripped = removePort(removeTrailingSlashAndQueryString(hostUri));\n\n  let path = parsed.pathname || null;\n  let hostname = parsed.hostname || null;\n  let scheme = parsed.protocol || null;\n\n  if (scheme) {\n    // Remove colon at end\n    scheme = scheme.substring(0, scheme.length - 1);\n  }\n\n  if (path) {\n    path = removeLeadingSlash(path);\n\n    let expoPrefix: string | null = null;\n    if (hostUriStripped) {\n      const parts = hostUriStripped.split('/');\n      expoPrefix = parts.slice(1).concat(['--/']).join('/');\n    }\n\n    if (isExpoHosted() && !hasCustomScheme() && expoPrefix && path.startsWith(expoPrefix)) {\n      path = path.substring(expoPrefix.length);\n      hostname = null;\n    } else if (path.indexOf('+') > -1) {\n      path = path.substring(path.indexOf('+') + 1);\n    }\n  }\n\n  return {\n    hostname,\n    path,\n    queryParams,\n    scheme,\n  };\n}\n\n// @needsAudit\n/**\n * Add a handler to `Linking` changes by listening to the `url` event type and providing the handler.\n * It is recommended to use the [`useURL()`](#useurl) hook instead.\n * @param type The only valid type is `'url'`.\n * @param handler An [`URLListener`](#urllistener) function that takes an `event` object of the type\n * [`EventType`](#eventype).\n * @return An EmitterSubscription that has the remove method from EventSubscription\n * @see [React Native Docs Linking page](https://reactnative.dev/docs/linking#addeventlistener).\n */\nexport function addEventListener(type: 'url', handler: URLListener): EmitterSubscription {\n  return NativeLinking.addEventListener(type, handler);\n}\n\n/**\n * Remove a handler by passing the `url` event type and the handler.\n * @param type The only valid type is `'url'`.\n * @param handler An [`URLListener`](#urllistener) function that takes an `event` object of the type\n * [`EventType`](#eventype).\n * @see [React Native Docs Linking page](https://reactnative.dev/docs/linking#removeeventlistener).\n *\n * @deprecated Call `remove()` on the return value of `addEventListener()` instead.\n */\nexport function removeEventListener(type: 'url', handler: URLListener): void {\n  NativeLinking.removeEventListener(type, handler);\n}\n\n// @needsAudit\n/**\n * Helper method which wraps React Native's `Linking.getInitialURL()` in `Linking.parse()`.\n * Parses the deep link information out of the URL used to open the experience initially.\n * If no link opened the app, all the fields will be `null`.\n * > On the web it parses the current window URL.\n * @return A promise that resolves with `ParsedURL` object.\n */\nexport async function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await NativeLinking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      scheme: null,\n      hostname: null,\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\n// @needsAudit\n/**\n * Launch an Android intent with extras.\n * > Use [IntentLauncher](./intent-launcher) instead, `sendIntent` is only included in\n * > `Linking` for API compatibility with React Native's Linking API.\n * @platform android\n */\nexport async function sendIntent(action: string, extras?: SendIntentExtras[]): Promise<void> {\n  if (Platform.OS === 'android') {\n    return await NativeLinking.sendIntent(action, extras);\n  }\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}\n\n// @needsAudit\n/**\n * Open the operating system settings app and displays the app’s custom settings, if it has any.\n */\nexport async function openSettings(): Promise<void> {\n  if (Platform.OS === 'web') {\n    throw new UnavailabilityError('Linking', 'openSettings');\n  }\n  if (NativeLinking.openSettings) {\n    return await NativeLinking.openSettings();\n  }\n  await openURL('app-settings:');\n}\n\n// @needsAudit\n/**\n * Get the URL that was used to launch the app if it was launched by a link.\n * @return The URL string that launched your app, or `null`.\n */\nexport async function getInitialURL(): Promise<string | null> {\n  return (await NativeLinking.getInitialURL()) ?? null;\n}\n\n// @needsAudit\n/**\n * Attempt to open the given URL with an installed app. See the [Linking guide](/guides/linking)\n * for more information.\n * @param url A URL for the operating system to open, eg: `tel:5555555`, `exp://`.\n * @return A `Promise` that is fulfilled with `true` if the link is opened operating system\n * automatically or the user confirms the prompt to open the link. The `Promise` rejects if there\n * are no applications registered for the URL or the user cancels the dialog.\n */\nexport async function openURL(url: string): Promise<true> {\n  validateURL(url);\n  return await NativeLinking.openURL(url);\n}\n\n// @needsAudit\n/**\n * Determine whether or not an installed app can handle a given URL.\n * On web this always returns `true` because there is no API for detecting what URLs can be opened.\n * @param url The URL that you want to test can be opened.\n * @return A `Promise` object that is fulfilled with `true` if the URL can be handled, otherwise it\n * `false` if not.\n *\n * The `Promise` will reject on Android if it was impossible to check if the URL can be opened, and\n * on iOS if you didn't [add the specific scheme in the `LSApplicationQueriesSchemes` key inside **Info.plist**](/guides/linking#opening-links-to-other-apps).\n */\nexport async function canOpenURL(url: string): Promise<boolean> {\n  validateURL(url);\n  return await NativeLinking.canOpenURL(url);\n}\n\n// @needsAudit\n/**\n * Returns the initial URL followed by any subsequent changes to the URL.\n * @return Returns the initial URL or `null`.\n */\nexport function useURL(): string | null {\n  const [url, setLink] = useState<string | null>(null);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    getInitialURL().then((url) => setLink(url));\n    const subscription = addEventListener('url', onChange);\n    return () => subscription.remove();\n  }, []);\n\n  return url;\n}\n\nexport * from './Linking.types';\nexport * from './Schemes';\n"]},"metadata":{},"sourceType":"script"}