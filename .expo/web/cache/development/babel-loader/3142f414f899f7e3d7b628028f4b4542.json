{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _default = {\n  get name() {\n    return 'ExpoRandom';\n  },\n\n  getRandomBytes: function getRandomBytes(length) {\n    var _window$crypto;\n\n    var array = new Uint8Array(length);\n    return ((_window$crypto = window.crypto) != null ? _window$crypto : window.msCrypto).getRandomValues(array);\n  },\n  getRandomBytesAsync: function () {\n    var _getRandomBytesAsync = (0, _asyncToGenerator2.default)(function* (length) {\n      var _window$crypto2;\n\n      var array = new Uint8Array(length);\n      return ((_window$crypto2 = window.crypto) != null ? _window$crypto2 : window.msCrypto).getRandomValues(array);\n    });\n\n    function getRandomBytesAsync(_x) {\n      return _getRandomBytesAsync.apply(this, arguments);\n    }\n\n    return getRandomBytesAsync;\n  }()\n};\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;eAAe;EACb,IAAIA,IAAJ,GAAQ;IACN,OAAO,YAAP;EACD,CAHY;;EAIbC,cAJa,0BAIEC,MAJF,EAIgB;IAAA;;IAC3B,IAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeF,MAAf,CAAd;IAEA,OAAO,mBAACG,MAAM,CAACC,MAAR,6BAAkBD,MAAM,CAACE,QAAzB,EAAmCC,eAAnC,CAAmDL,KAAnD,CAAP;EACD,CARY;EASPM,mBATO;IAAA,sEASaP,MATb,EAS2B;MAAA;;MACtC,IAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeF,MAAf,CAAd;MAEA,OAAO,oBAACG,MAAM,CAACC,MAAR,8BAAkBD,MAAM,CAACE,QAAzB,EAAmCC,eAAnC,CAAmDL,KAAnD,CAAP;IACD,CAbY;;IAAA;MAAA;IAAA;;IAAA;EAAA;AAAA,C","names":["name","getRandomBytes","length","array","Uint8Array","window","crypto","msCrypto","getRandomValues","getRandomBytesAsync"],"sourceRoot":"","sources":["../src/ExpoRandom.web.ts"],"sourcesContent":["export default {\n  get name(): string {\n    return 'ExpoRandom';\n  },\n  getRandomBytes(length: number): Uint8Array {\n    const array = new Uint8Array(length);\n    // @ts-ignore\n    return (window.crypto ?? window.msCrypto).getRandomValues(array);\n  },\n  async getRandomBytesAsync(length: number): Promise<Uint8Array> {\n    const array = new Uint8Array(length);\n    // @ts-ignore\n    return (window.crypto ?? window.msCrypto).getRandomValues(array);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}