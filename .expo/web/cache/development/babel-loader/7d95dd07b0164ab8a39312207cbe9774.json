{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"AppOwnership\", {\n  enumerable: true,\n  get: function get() {\n    return _Constants.AppOwnership;\n  }\n});\nObject.defineProperty(exports, \"ExecutionEnvironment\", {\n  enumerable: true,\n  get: function get() {\n    return _Constants.ExecutionEnvironment;\n  }\n});\nObject.defineProperty(exports, \"UserInterfaceIdiom\", {\n  enumerable: true,\n  get: function get() {\n    return _Constants.UserInterfaceIdiom;\n  }\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _Constants = require(\"./Constants.types\");\n\nvar _ExponentConstants = _interopRequireDefault(require(\"./ExponentConstants\"));\n\nvar _constants$platform;\n\nif (!_ExponentConstants.default) {\n  console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");\n}\n\nvar rawManifest = null;\n\nif (_expoModulesCore.NativeModulesProxy.ExpoUpdates) {\n  var updatesManifest;\n\n  if (_expoModulesCore.NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = _expoModulesCore.NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (_expoModulesCore.NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(_expoModulesCore.NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\n\nif (_reactNative.NativeModules.EXDevLauncher) {\n  var devLauncherManifest;\n\n  if (_reactNative.NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(_reactNative.NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\n\nif (!rawManifest && _ExponentConstants.default && _ExponentConstants.default.manifest) {\n  rawManifest = _ExponentConstants.default.manifest;\n\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\n\nvar _ref = _ExponentConstants.default || {},\n    name = _ref.name,\n    appOwnership = _ref.appOwnership,\n    nativeConstants = (0, _objectWithoutProperties2.default)(_ref, [\"name\", \"appOwnership\"]);\n\nvar warnedAboutDeviceYearClass = false;\nvar warnedAboutIosModel = false;\nvar constants = Object.assign({}, nativeConstants, {\n  appOwnership: appOwnership != null ? appOwnership : null\n});\nObject.defineProperties(constants, {\n  deviceYearClass: {\n    get: function get() {\n      if (!warnedAboutDeviceYearClass) {\n        console.warn(\"Constants.deviceYearClass has been deprecated in favor of expo-device's Device.deviceYearClass property. This API will be removed in SDK 45.\");\n        warnedAboutDeviceYearClass = true;\n      }\n\n      return nativeConstants.deviceYearClass;\n    },\n    enumerable: false\n  },\n  installationId: {\n    get: function get() {\n      return nativeConstants.installationId;\n    },\n    enumerable: false\n  },\n  __unsafeNoWarnManifest: {\n    get: function get() {\n      var maybeManifest = getManifest(true);\n\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n\n      return maybeManifest;\n    },\n    enumerable: false\n  },\n  __unsafeNoWarnManifest2: {\n    get: function get() {\n      var maybeManifest = getManifest(true);\n\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n\n      return maybeManifest;\n    },\n    enumerable: false\n  },\n  manifest: {\n    get: function get() {\n      var maybeManifest = getManifest();\n\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n\n      return maybeManifest;\n    },\n    enumerable: true\n  },\n  manifest2: {\n    get: function get() {\n      var maybeManifest = getManifest();\n\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n\n      return maybeManifest;\n    },\n    enumerable: true\n  },\n  expoConfig: {\n    get: function get() {\n      var maybeManifest = getManifest(true);\n\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isManifest(maybeManifest)) {\n        var _maybeManifest$extra$, _maybeManifest$extra;\n\n        return (_maybeManifest$extra$ = (_maybeManifest$extra = maybeManifest.extra) == null ? void 0 : _maybeManifest$extra.expoClient) != null ? _maybeManifest$extra$ : null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n\n      return null;\n    },\n    enumerable: true\n  },\n  __rawManifest_TEST: {\n    get: function get() {\n      return rawManifest;\n    },\n    set: function set(value) {\n      rawManifest = value;\n    },\n    enumerable: false\n  }\n});\n\nif (constants != null && (_constants$platform = constants.platform) != null && _constants$platform.ios) {\n  var originalModel = nativeConstants.platform.ios.model;\n  Object.defineProperty(constants.platform.ios, 'model', {\n    get: function get() {\n      if (!warnedAboutIosModel) {\n        console.warn(\"Constants.platform.ios.model has been deprecated in favor of expo-device's Device.modelName property. This API will be removed in SDK 45.\");\n        warnedAboutIosModel = true;\n      }\n\n      return originalModel;\n    },\n    enumerable: false\n  });\n}\n\nfunction isAppManifest(manifest) {\n  return !isManifest(manifest);\n}\n\nfunction isManifest(manifest) {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest() {\n  var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  if (!rawManifest) {\n    var invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n\n    if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Bare && _reactNative.Platform.OS !== 'web') {\n      if (!suppressWarning) {\n        console.warn(\"Constants.manifest is \" + invalidManifestType + \" because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.\");\n      }\n    } else if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Standalone) {\n      throw new _expoModulesCore.CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', \"Constants.manifest is \" + invalidManifestType + \", must be an object.\");\n    }\n  }\n\n  return rawManifest;\n}\n\nvar _default = constants;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["ExponentConstants","console","warn","rawManifest","NativeModulesProxy","ExpoUpdates","updatesManifest","manifest","manifestString","JSON","parse","Object","keys","length","NativeModules","EXDevLauncher","devLauncherManifest","name","appOwnership","nativeConstants","warnedAboutDeviceYearClass","warnedAboutIosModel","constants","defineProperties","deviceYearClass","get","enumerable","installationId","__unsafeNoWarnManifest","maybeManifest","getManifest","isAppManifest","__unsafeNoWarnManifest2","isManifest","manifest2","expoConfig","extra","expoClient","__rawManifest_TEST","set","value","platform","ios","originalModel","model","defineProperty","suppressWarning","invalidManifestType","executionEnvironment","ExecutionEnvironment","Bare","Platform","OS","StoreClient","Standalone","CodedError"],"sourceRoot":"","sources":["../src/Constants.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { CodedError, NativeModulesProxy } from 'expo-modules-core';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  Manifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet rawManifest: AppManifest | Manifest | null = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nlet warnedAboutDeviceYearClass = false;\nlet warnedAboutIosModel = false;\n\nconst constants: Constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n};\n\nObject.defineProperties(constants, {\n  // Deprecated field\n  deviceYearClass: {\n    get() {\n      if (!warnedAboutDeviceYearClass) {\n        console.warn(\n          `Constants.deviceYearClass has been deprecated in favor of expo-device's Device.deviceYearClass property. This API will be removed in SDK 45.`\n        );\n        warnedAboutDeviceYearClass = true;\n      }\n      return nativeConstants.deviceYearClass;\n    },\n    enumerable: false,\n  },\n  installationId: {\n    get() {\n      return nativeConstants.installationId;\n    },\n    enumerable: false,\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest: {\n    get(): AppManifest | Manifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  __unsafeNoWarnManifest2: {\n    get(): Manifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  manifest: {\n    get(): AppManifest | null {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  manifest2: {\n    get(): Manifest | null {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  expoConfig: {\n    get(): ExpoConfig | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoClient ?? null;\n      } else if (isAppManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  __rawManifest_TEST: {\n    get(): AppManifest | Manifest | null {\n      return rawManifest;\n    },\n    set(value: AppManifest | Manifest | null) {\n      rawManifest = value;\n    },\n    enumerable: false,\n  },\n});\n\n// Add deprecation warning for `platform.ios.model`\nif (constants?.platform?.ios) {\n  const originalModel = nativeConstants.platform.ios.model;\n  Object.defineProperty(constants.platform.ios, 'model', {\n    get() {\n      if (!warnedAboutIosModel) {\n        console.warn(\n          `Constants.platform.ios.model has been deprecated in favor of expo-device's Device.modelName property. This API will be removed in SDK 45.`\n        );\n        warnedAboutIosModel = true;\n      }\n      return originalModel;\n    },\n    enumerable: false,\n  });\n}\n\nfunction isAppManifest(manifest: AppManifest | Manifest): manifest is AppManifest {\n  return !isManifest(manifest);\n}\n\nfunction isManifest(manifest: AppManifest | Manifest): manifest is Manifest {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest(suppressWarning = false): AppManifest | Manifest | null {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return rawManifest;\n}\n\nexport default constants as Constants;\n"]},"metadata":{},"sourceType":"script"}