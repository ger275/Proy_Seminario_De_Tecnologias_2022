{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar EventTypes = ['url'];\nvar listeners = [];\nvar _default = {\n  addEventListener: function addEventListener(type, listener) {\n    var _this = this;\n\n    if (!_expoModulesCore.Platform.isDOMAvailable) {\n      return {\n        remove: function remove() {}\n      };\n    }\n\n    (0, _invariant.default)(EventTypes.indexOf(type) !== -1, \"Linking.addEventListener(): \" + type + \" is not a valid event\");\n\n    var nativeListener = function nativeListener(nativeEvent) {\n      return listener({\n        url: window.location.href,\n        nativeEvent: nativeEvent\n      });\n    };\n\n    listeners.push({\n      listener: listener,\n      nativeListener: nativeListener\n    });\n    window.addEventListener('message', nativeListener, false);\n    return {\n      remove: function remove() {\n        _this.removeEventListener(type, listener);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, listener) {\n    if (!_expoModulesCore.Platform.isDOMAvailable) {\n      return;\n    }\n\n    (0, _invariant.default)(EventTypes.indexOf(type) !== -1, \"Linking.removeEventListener(): \" + type + \" is not a valid event.\");\n    var listenerIndex = listeners.findIndex(function (pair) {\n      return pair.listener === listener;\n    });\n    (0, _invariant.default)(listenerIndex !== -1, 'Linking.removeEventListener(): cannot remove an unregistered event listener.');\n    var nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n  canOpenURL: function () {\n    var _canOpenURL = (0, _asyncToGenerator2.default)(function* (url) {\n      return true;\n    });\n\n    function canOpenURL(_x) {\n      return _canOpenURL.apply(this, arguments);\n    }\n\n    return canOpenURL;\n  }(),\n  getInitialURL: function () {\n    var _getInitialURL = (0, _asyncToGenerator2.default)(function* () {\n      if (!_expoModulesCore.Platform.isDOMAvailable) return '';\n      return window.location.href;\n    });\n\n    function getInitialURL() {\n      return _getInitialURL.apply(this, arguments);\n    }\n\n    return getInitialURL;\n  }(),\n  openURL: function () {\n    var _openURL = (0, _asyncToGenerator2.default)(function* (url) {\n      if (_expoModulesCore.Platform.isDOMAvailable) {\n        window.location = new URL(url, window.location).toString();\n      }\n    });\n\n    function openURL(_x2) {\n      return _openURL.apply(this, arguments);\n    }\n\n    return openURL;\n  }()\n};\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AACA;;AAIA,IAAMA,UAAU,GAAG,CAAC,KAAD,CAAnB;AAEA,IAAMC,SAAS,GAAmE,EAAlF;eAEe;EACbC,gBADa,4BACIC,IADJ,EACiBC,QADjB,EACsC;IAAA;;IAEjD,IAAI,CAACC,0BAASC,cAAd,EAA8B;MAC5B,OAAO;QAAEC,MAAF,oBAAQ,CAAK;MAAb,CAAP;IACD;;IAED,wBACEP,UAAU,CAACQ,OAAX,CAAmBL,IAAnB,MAA6B,CAAC,CADhC,mCAEiCA,IAFjC;;IAIA,IAAMM,cAAc,GAAsB,SAApCA,cAAoC,CAACC,WAAD;MAAA,OACxCN,QAAQ,CAAC;QAAEO,GAAG,EAAEC,MAAM,CAACC,QAAP,CAAgBC,IAAvB;QAA6BJ,WAAW,EAAXA;MAA7B,CAAD,CADgC;IAAA,CAA1C;;IAEAT,SAAS,CAACc,IAAV,CAAe;MAAEX,QAAQ,EAARA,QAAF;MAAYK,cAAc,EAAdA;IAAZ,CAAf;IACAG,MAAM,CAACV,gBAAP,CAAwB,SAAxB,EAAmCO,cAAnC,EAAmD,KAAnD;IACA,OAAO;MACLF,MAAM,EAAE,kBAAK;QACX,KAAI,CAACS,mBAAL,CAAyBb,IAAzB,EAA+BC,QAA/B;MACD;IAHI,CAAP;EAKD,CApBY;EAsBbY,mBAtBa,+BAsBOb,IAtBP,EAsBoBC,QAtBpB,EAsByC;IAEpD,IAAI,CAACC,0BAASC,cAAd,EAA8B;MAC5B;IACD;;IACD,wBACEN,UAAU,CAACQ,OAAX,CAAmBL,IAAnB,MAA6B,CAAC,CADhC,sCAEoCA,IAFpC;IAIA,IAAMc,aAAa,GAAGhB,SAAS,CAACiB,SAAV,CAAoB,UAACC,IAAD;MAAA,OAAUA,IAAI,CAACf,QAAL,KAAkBA,QAA5B;IAAA,CAApB,CAAtB;IACA,wBACEa,aAAa,KAAK,CAAC,CADrB,EAEE,8EAFF;IAIA,IAAMR,cAAc,GAAGR,SAAS,CAACgB,aAAD,CAAT,CAAyBR,cAAhD;IACAG,MAAM,CAACI,mBAAP,CAA2B,SAA3B,EAAsCP,cAAtC,EAAsD,KAAtD;IACAR,SAAS,CAACmB,MAAV,CAAiBH,aAAjB,EAAgC,CAAhC;EACD,CAvCY;EAyCPI,UAzCO;IAAA,6DAyCIV,GAzCJ,EAyCe;MAE1B,OAAO,IAAP;IACD,CA5CY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EA8CPW,aA9CO;IAAA,kEA8CM;MACjB,IAAI,CAACjB,0BAASC,cAAd,EAA8B,OAAO,EAAP;MAC9B,OAAOM,MAAM,CAACC,QAAP,CAAgBC,IAAvB;IACD,CAjDY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EAmDPS,OAnDO;IAAA,0DAmDCZ,GAnDD,EAmDY;MACvB,IAAIN,0BAASC,cAAb,EAA6B;QAE3BM,MAAM,CAACC,QAAP,GAAkB,IAAIW,GAAJ,CAAQb,GAAR,EAAaC,MAAM,CAACC,QAApB,EAA8BY,QAA9B,EAAlB;MACD;IACF,CAxDY;;IAAA;MAAA;IAAA;;IAAA;EAAA;AAAA,C","names":["EventTypes","listeners","addEventListener","type","listener","Platform","isDOMAvailable","remove","indexOf","nativeListener","nativeEvent","url","window","location","href","push","removeEventListener","listenerIndex","findIndex","pair","splice","canOpenURL","getInitialURL","openURL","URL","toString"],"sourceRoot":"","sources":["../src/ExpoLinking.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport { NativeURLListener, URLListener } from './Linking.types';\n\nconst EventTypes = ['url'];\n\nconst listeners: { listener: URLListener; nativeListener: NativeURLListener }[] = [];\n\nexport default {\n  addEventListener(type: 'url', listener: URLListener): { remove(): void } {\n    // Do nothing in Node.js environments\n    if (!Platform.isDOMAvailable) {\n      return { remove() {} };\n    }\n\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.addEventListener(): ${type} is not a valid event`\n    );\n    const nativeListener: NativeURLListener = (nativeEvent) =>\n      listener({ url: window.location.href, nativeEvent });\n    listeners.push({ listener, nativeListener });\n    window.addEventListener('message', nativeListener, false);\n    return {\n      remove: () => {\n        this.removeEventListener(type, listener);\n      },\n    };\n  },\n\n  removeEventListener(type: 'url', listener: URLListener): void {\n    // Do nothing in Node.js environments\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.removeEventListener(): ${type} is not a valid event.`\n    );\n    const listenerIndex = listeners.findIndex((pair) => pair.listener === listener);\n    invariant(\n      listenerIndex !== -1,\n      'Linking.removeEventListener(): cannot remove an unregistered event listener.'\n    );\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n\n  async canOpenURL(url: string): Promise<boolean> {\n    // In reality this should be able to return false for links like `chrome://` on chrome.\n    return true;\n  },\n\n  async getInitialURL(): Promise<string> {\n    if (!Platform.isDOMAvailable) return '';\n    return window.location.href;\n  },\n\n  async openURL(url: string): Promise<void> {\n    if (Platform.isDOMAvailable) {\n      // @ts-ignore\n      window.location = new URL(url, window.location).toString();\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"script"}