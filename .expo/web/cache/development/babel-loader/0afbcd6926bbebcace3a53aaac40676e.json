{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildQueryString = buildQueryString;\nexports.getQueryParams = getQueryParams;\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\nfunction buildQueryString(input) {\n  return _qs.default.stringify(input);\n}\n\nfunction getQueryParams(url) {\n  var _parsedSearch$errorCo;\n\n  var parts = url.split('#');\n  var hash = parts[1];\n  var partsWithoutHash = parts[0].split('?');\n  var queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  var parsedSearch = _qs.default.parse(queryString, {\n    parseArrays: false\n  });\n\n  var errorCode = (_parsedSearch$errorCo = parsedSearch.errorCode) != null ? _parsedSearch$errorCo : null;\n  (0, _invariant.default)(typeof errorCode === 'string' || errorCode === null, \"The \\\"errorCode\\\" parameter must be a string if specified\");\n  delete parsedSearch.errorCode;\n  var parsedHash = {};\n\n  if (parts[1]) {\n    parsedHash = _qs.default.parse(hash);\n  }\n\n  var params = Object.assign({}, parsedSearch, parsedHash);\n  return {\n    errorCode: errorCode,\n    params: params\n  };\n}","map":{"version":3,"mappings":";;;;;;;;AAAA;;AACA;;AAEM,SAAUA,gBAAV,CAA2BC,KAA3B,EAAwD;EAC5D,OAAOC,YAAGC,SAAH,CAAaF,KAAb,CAAP;AACD;;AAEK,SAAUG,cAAV,CAAyBC,GAAzB,EAAoC;EAAA;;EAIxC,IAAMC,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAd;EACA,IAAMC,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAlB;EACA,IAAMG,gBAAgB,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASC,KAAT,CAAe,GAAf,CAAzB;EACA,IAAMG,WAAW,GAAGD,gBAAgB,CAACA,gBAAgB,CAACE,MAAjB,GAA0B,CAA3B,CAApC;;EAGA,IAAMC,YAAY,GAAGV,YAAGW,KAAH,CAASH,WAAT,EAAsB;IAAEI,WAAW,EAAE;EAAf,CAAtB,CAArB;;EAGA,IAAMC,SAAS,4BAAIH,YAAY,CAACG,SAAjB,oCAA8B,IAA7C;EACA,wBACE,OAAOA,SAAP,KAAqB,QAArB,IAAiCA,SAAS,KAAK,IADjD;EAIA,OAAOH,YAAY,CAACG,SAApB;EAGA,IAAIC,UAAU,GAAG,EAAjB;;EACA,IAAIV,KAAK,CAAC,CAAD,CAAT,EAAc;IACZU,UAAU,GAAGd,YAAGW,KAAH,CAASL,IAAT,CAAb;EACD;;EAGD,IAAMS,MAAM,qBACPL,YADO,EAEPI,UAFO,CAAZ;EAKA,OAAO;IACLD,SAAS,EAATA,SADK;IAELE,MAAM,EAANA;EAFK,CAAP;AAID","names":["buildQueryString","input","qs","stringify","getQueryParams","url","parts","split","hash","partsWithoutHash","queryString","length","parsedSearch","parse","parseArrays","errorCode","parsedHash","params"],"sourceRoot":"","sources":["../src/QueryParams.ts"],"sourcesContent":["import invariant from 'invariant';\nimport qs from 'qs';\n\nexport function buildQueryString(input: Record<string, string>): string {\n  return qs.stringify(input);\n}\n\nexport function getQueryParams(url: string): {\n  errorCode: string | null;\n  params: { [key: string]: string };\n} {\n  const parts = url.split('#');\n  const hash = parts[1];\n  const partsWithoutHash = parts[0].split('?');\n  const queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  // Get query string (?hello=world)\n  const parsedSearch = qs.parse(queryString, { parseArrays: false });\n\n  // Pull errorCode off of params\n  const errorCode = (parsedSearch.errorCode ?? null) as string | null;\n  invariant(\n    typeof errorCode === 'string' || errorCode === null,\n    `The \"errorCode\" parameter must be a string if specified`\n  );\n  delete parsedSearch.errorCode;\n\n  // Get hash (#abc=example)\n  let parsedHash = {};\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  // Merge search and hash\n  const params = {\n    ...parsedSearch,\n    ...parsedHash,\n  };\n\n  return {\n    errorCode,\n    params,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}